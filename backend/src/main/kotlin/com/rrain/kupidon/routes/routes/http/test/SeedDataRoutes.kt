package com.rrain.kupidon.routes.routes.http.test

import com.mongodb.client.model.Filters
import com.rrain.kupidon.models.Gender
import com.rrain.kupidon.models.LookingFor
import com.rrain.kupidon.models.db.EventCategory
import com.rrain.kupidon.models.db.EventCoordinates
import com.rrain.kupidon.models.db.EventM
import com.rrain.kupidon.models.db.UserM
import com.rrain.kupidon.services.mongo.collEvents
import com.rrain.kupidon.services.mongo.collUsers
import com.rrain.kupidon.services.`pwd-hash`.PwdHashService
import com.rrain.utils.base.`date-time`.now
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import kotlinx.coroutines.flow.firstOrNull
import kotlinx.datetime.Instant
import java.util.UUID
import kotlin.time.Duration.Companion.days

/**
 * –†–æ—É—Ç—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
fun Application.addSeedDataRoutes() {
  
  routing {
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    get("/test/seed/all") {
      val now = now()
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      val testUsers = listOf(
        UserM(
          id = UUID.randomUUID(),
          email = "alice@test.com",
          emailVerified = true,
          pwdHash = PwdHashService.hashPassword("password123"),
          name = "–ê–ª–∏—Å–∞",
          birthDate = Instant.parse("1995-05-15T00:00:00Z"),
          gender = Gender.FEMALE,
          lookingFor = LookingFor.MALE,
          bio = "–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏ –∏ —Ö–æ—Ä–æ—à—É—é –∫–æ–º–ø–∞–Ω–∏—é ‚òï",
          city = "–ú–æ—Å–∫–≤–∞",
          createdAt = now,
          updatedAt = now
        ),
        UserM(
          id = UUID.randomUUID(),
          email = "bob@test.com",
          emailVerified = true,
          pwdHash = PwdHashService.hashPassword("password123"),
          name = "–ë–æ–±",
          birthDate = Instant.parse("1992-08-20T00:00:00Z"),
          gender = Gender.MALE,
          lookingFor = LookingFor.FEMALE,
          bio = "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –ª—é–±–∏—Ç–µ–ª—å —Å–ø–æ—Ä—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ üèÉ‚Äç‚ôÇÔ∏è",
          city = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
          createdAt = now,
          updatedAt = now
        ),
        UserM(
          id = UUID.randomUUID(),
          email = "charlie@test.com",
          emailVerified = true,
          pwdHash = PwdHashService.hashPassword("password123"),
          name = "–ß–∞—Ä–ª–∏",
          birthDate = Instant.parse("1998-03-10T00:00:00Z"),
          gender = Gender.MALE,
          lookingFor = LookingFor.BOTH,
          bio = "–ú—É–∑—ã–∫–∞–Ω—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ, –º–µ—á—Ç–∞—Ç–µ–ª—å üé∏üì∑",
          city = "–ú–æ—Å–∫–≤–∞",
          createdAt = now,
          updatedAt = now
        ),
        UserM(
          id = UUID.randomUUID(),
          email = "diana@test.com",
          emailVerified = true,
          pwdHash = PwdHashService.hashPassword("password123"),
          name = "–î–∏–∞–Ω–∞",
          birthDate = Instant.parse("1996-11-25T00:00:00Z"),
          gender = Gender.FEMALE,
          lookingFor = LookingFor.MALE,
          bio = "–î–∏–∑–∞–π–Ω–µ—Ä, –π–æ–≥–∞, –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ üßò‚Äç‚ôÄÔ∏è",
          city = "–ö–∞–∑–∞–Ω—å",
          createdAt = now,
          updatedAt = now
        ),
        UserM(
          id = UUID.randomUUID(),
          email = "eve@test.com",
          emailVerified = true,
          pwdHash = PwdHashService.hashPassword("password123"),
          name = "–ï–≤–∞",
          birthDate = Instant.parse("1994-07-08T00:00:00Z"),
          gender = Gender.FEMALE,
          lookingFor = LookingFor.BOTH,
          bio = "–•—É–¥–æ–∂–Ω–∏—Ü–∞, –ª—é–±–ª—é –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∫—É–ª—å—Ç—É—Ä—É üé®",
          city = "–ú–æ—Å–∫–≤–∞",
          createdAt = now,
          updatedAt = now
        )
      )
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
      val insertedUsers = mutableListOf<UserM>()
      for (user in testUsers) {
        val existing = collUsers.find(Filters.eq(UserM::email.name, user.email)).firstOrNull()
        if (existing == null) {
          collUsers.insertOne(user)
          insertedUsers.add(user)
        } else {
          insertedUsers.add(existing)
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
      val testEvents = listOf(
        EventM(
          id = UUID.randomUUID(),
          creatorId = insertedUsers[0].id,
          title = "–í–µ—á–µ—Ä–∏–Ω–∫–∞ –≤ —Å—Ç–∏–ª–µ 90-—Ö",
          description = "–ù–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ —Å –º—É–∑—ã–∫–æ–π 90-—Ö! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –æ–±—Ä–∞–∑–∞—Ö —Ç–æ–π —ç–ø–æ—Ö–∏ üéâ",
          category = EventCategory.PARTY,
          startDate = now + 7.days,
          endDate = now + 7.days + 4.days.inWholeHours.toInt().days,
          location = "–ö–ª—É–± Retrowave, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15",
          coordinates = EventCoordinates(55.7558, 37.6173),
          imageUrl = "https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?w=800",
          maxParticipants = 50,
          tags = listOf("–≤–µ—á–µ—Ä–∏–Ω–∫–∞", "90-–µ", "—Ä–µ—Ç—Ä–æ", "–º—É–∑—ã–∫–∞"),
          participants = listOf(insertedUsers[1].id, insertedUsers[2].id),
          likesCount = 15,
          fireCount = 8,
          createdAt = now,
          updatedAt = now,
          isPinned = true
        ),
        EventM(
          id = UUID.randomUUID(),
          creatorId = insertedUsers[1].id,
          title = "–ó–∞–±–µ–≥ –≤ –ø–∞—Ä–∫–µ –ì–æ—Ä—å–∫–æ–≥–æ",
          description = "–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è —É –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ üèÉ",
          category = EventCategory.SPORT,
          startDate = now + 2.days,
          location = "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ, –≥–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥",
          coordinates = EventCoordinates(55.7312, 37.6018),
          maxParticipants = 30,
          tags = listOf("—Å–ø–æ—Ä—Ç", "–±–µ–≥", "–∑–¥–æ—Ä–æ–≤—å–µ", "—É—Ç—Ä–æ"),
          participants = listOf(insertedUsers[0].id, insertedUsers[3].id),
          likesCount = 22,
          fireCount = 12,
          createdAt = now,
          updatedAt = now
        ),
        EventM(
          id = UUID.randomUUID(),
          creatorId = insertedUsers[2].id,
          title = "–ö–æ–Ω—Ü–µ—Ä—Ç –¥–∂–∞–∑–æ–≤–æ–π –º—É–∑—ã–∫–∏",
          description = "–ñ–∏–≤–∞—è –¥–∂–∞–∑–æ–≤–∞—è –º—É–∑—ã–∫–∞ –≤ —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ. –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –ª—é–±–∏—Ç–µ–ª–µ–π —Ö–æ—Ä–æ—à–µ–π –º—É–∑—ã–∫–∏ üé∑",
          category = EventCategory.CULTURAL,
          startDate = now + 5.days,
          endDate = now + 5.days + 3.days.inWholeHours.toInt().days,
          location = "–î–∂–∞–∑-–∫–ª—É–± –≠—Å—Å–µ, –ü–æ—Ç–∞–ø–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫, 5",
          coordinates = EventCoordinates(55.7558, 37.6278),
          imageUrl = "https://images.unsplash.com/photo-1415201364774-f6f0bb35f28f?w=800",
          maxParticipants = 40,
          tags = listOf("–º—É–∑—ã–∫–∞", "–¥–∂–∞–∑", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–∫—É–ª—å—Ç—É—Ä–∞"),
          participants = listOf(insertedUsers[4].id),
          likesCount = 18,
          fireCount = 10,
          createdAt = now,
          updatedAt = now
        ),
        EventM(
          id = UUID.randomUUID(),
          creatorId = insertedUsers[3].id,
          title = "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –π–æ–≥–µ",
          description = "–ô–æ–≥–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö. –ö–æ–≤—Ä–∏–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è üßò‚Äç‚ôÄÔ∏è",
          category = EventCategory.WORKSHOP,
          startDate = now + 3.days,
          location = "–ô–æ–≥–∞-—Å—Ç—É–¥–∏—è –ü—Ä–∞–Ω–∞, —É–ª. –ú–∞—Ä–æ—Å–µ–π–∫–∞, 9",
          coordinates = EventCoordinates(55.7580, 37.6360),
          maxParticipants = 15,
          tags = listOf("–π–æ–≥–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–º–µ–¥–∏—Ç–∞—Ü–∏—è", "–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å"),
          participants = listOf(insertedUsers[0].id, insertedUsers[4].id),
          likesCount = 25,
          fireCount = 15,
          createdAt = now,
          updatedAt = now
        ),
        EventM(
          id = UUID.randomUUID(),
          creatorId = insertedUsers[4].id,
          title = "–ü–∏–∫–Ω–∏–∫ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
          description = "–í—ã–µ–∑–¥ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É —Å –∏–≥—Ä–∞–º–∏, –µ–¥–æ–π –∏ —Ö–æ—Ä–æ—à–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π! –ë–µ—Ä–∏—Ç–µ —Å —Å–æ–±–æ–π —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üå≥",
          category = EventCategory.OUTDOOR,
          startDate = now + 10.days,
          location = "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –±–æ—Ä",
          coordinates = EventCoordinates(55.7833, 37.4167),
          imageUrl = "https://images.unsplash.com/photo-1506929562872-bb421503ef21?w=800",
          maxParticipants = 25,
          tags = listOf("–ø—Ä–∏—Ä–æ–¥–∞", "–ø–∏–∫–Ω–∏–∫", "–æ—Ç–¥—ã—Ö", "–¥—Ä—É–∑—å—è"),
          participants = listOf(insertedUsers[1].id, insertedUsers[2].id, insertedUsers[3].id),
          likesCount = 30,
          fireCount = 20,
          createdAt = now,
          updatedAt = now,
          isPinned = true
        ),
        EventM(
          id = UUID.randomUUID(),
          creatorId = insertedUsers[0].id,
          title = "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω",
          description = "–í–µ—á–µ—Ä –¥–ª—è –¥–≤–æ–∏—Ö –≤ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ üïØÔ∏è",
          category = EventCategory.DATING,
          startDate = now + 4.days,
          location = "–†–µ—Å—Ç–æ—Ä–∞–Ω White Rabbit, –°–º–æ–ª–µ–Ω—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å, 3",
          coordinates = EventCoordinates(55.7467, 37.5814),
          imageUrl = "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=800",
          maxParticipants = 2,
          tags = listOf("—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "—É–∂–∏–Ω", "—Å–≤–∏–¥–∞–Ω–∏–µ"),
          likesCount = 12,
          fireCount = 8,
          createdAt = now,
          updatedAt = now
        ),
        EventM(
          id = UUID.randomUUID(),
          creatorId = insertedUsers[1].id,
          title = "–í—Å—Ç—Ä–µ—á–∞ –≤ –∫–æ—Ñ–µ–π–Ω–µ",
          description = "–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –æ–±—â–µ–Ω–∏—è –∑–∞ —á–∞—à–∫–æ–π –∫–æ—Ñ–µ ‚òï",
          category = EventCategory.MEETUP,
          startDate = now + 1.days,
          location = "–ö–æ—Ñ–µ–π–Ω—è –ö–æ—Ñ–µ–º–∞–Ω–∏—è, –ù–∏–∫–æ–ª—å—Å–∫–∞—è —É–ª., 10",
          coordinates = EventCoordinates(55.7558, 37.6211),
          maxParticipants = 10,
          tags = listOf("–∫–æ—Ñ–µ", "–æ–±—â–µ–Ω–∏–µ", "–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", "–≤—Å—Ç—Ä–µ—á–∞"),
          participants = listOf(insertedUsers[2].id, insertedUsers[4].id),
          likesCount = 8,
          fireCount = 5,
          createdAt = now,
          updatedAt = now
        ),
        EventM(
          id = UUID.randomUUID(),
          creatorId = insertedUsers[2].id,
          title = "–§–æ—Ç–æ–ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É",
          description = "–ü—Ä–æ–≥—É–ª–∫–∞ —Å —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç–∞–º–∏ –ø–æ –∫—Ä–∞—Å–∏–≤—ã–º –º–µ—Å—Ç–∞–º –ú–æ—Å–∫–≤—ã üì∑",
          category = EventCategory.CULTURAL,
          startDate = now + 6.days,
          location = "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
          coordinates = EventCoordinates(55.7539, 37.6208),
          imageUrl = "https://images.unsplash.com/photo-1452421822248-d4c2b47f0c81?w=800",
          maxParticipants = 12,
          tags = listOf("—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ø—Ä–æ–≥—É–ª–∫–∞", "–≥–æ—Ä–æ–¥", "–∏—Å–∫—É—Å—Å—Ç–≤–æ"),
          participants = listOf(insertedUsers[3].id),
          likesCount = 14,
          fireCount = 9,
          createdAt = now,
          updatedAt = now
        )
      )
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
      val insertedEvents = mutableListOf<EventM>()
      for (event in testEvents) {
        val existing = collEvents.find(Filters.eq(EventM::title.name, event.title)).firstOrNull()
        if (existing == null) {
          collEvents.insertOne(event)
          insertedEvents.add(event)
        } else {
          insertedEvents.add(existing)
        }
      }
      
      call.respond(HttpStatusCode.OK, mapOf(
        "message" to "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
        "users" to mapOf(
          "inserted" to insertedUsers.size,
          "emails" to insertedUsers.map { it.email }
        ),
        "events" to mapOf(
          "inserted" to insertedEvents.size,
          "titles" to insertedEvents.map { it.title }
        )
      ))
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    get("/test/seed/clear") {
      val testEmails = listOf(
        "alice@test.com",
        "bob@test.com",
        "charlie@test.com",
        "diana@test.com",
        "eve@test.com"
      )
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      val deletedUsers = collUsers.deleteMany(
        Filters.`in`(UserM::email.name, testEmails)
      ).deletedCount
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
      val deletedEvents = collEvents.deleteMany(Filters.empty()).deletedCount
      
      call.respond(HttpStatusCode.OK, mapOf(
        "message" to "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã",
        "deletedUsers" to deletedUsers,
        "deletedEvents" to deletedEvents
      ))
    }
  }
}
